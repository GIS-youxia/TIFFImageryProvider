import { Credit, Event, Rectangle, Cartesian3, Math as Math$1, GeographicTilingScheme, DeveloperError, ImageryLayerFeatureInfo } from 'cesium';
import { fromUrl, Pool } from 'geotiff';

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('', null, false);
/* eslint-enable */

// @ts-ignore
const resolves = {};
const rejects = {};
let globalMsgId = 0; // Activate calculation in the worker, returning a promise
async function sendMessage(worker, payload) {
    const msgId = globalMsgId++;
    const msg = {
        id: msgId,
        payload,
    };
    return new Promise(function (resolve, reject) {
        // save callbacks for later
        resolves[msgId] = resolve;
        rejects[msgId] = reject;
        worker.postMessage(msg);
    });
} // Handle incoming calculation result
function handleMessage(msg) {
    const { id, err, payload } = msg.data;
    if (payload) {
        const resolve = resolves[id];
        if (resolve) {
            resolve(payload);
        }
    }
    else {
        // error condition
        const reject = rejects[id];
        if (reject) {
            if (err) {
                reject(err);
            }
            else {
                reject("Got nothing");
            }
        }
    }
    // purge used callbacks
    delete resolves[id];
    delete rejects[id];
}
class WorkerFarm {
    worker;
    constructor() {
        this.worker = new WorkerFactory();
        this.worker.onmessage = handleMessage;
    }
    async scheduleTask(data, opts) {
        return await sendMessage(this.worker, { data, opts });
    }
    destory() {
        this.worker.terminate();
        this.worker = undefined;
    }
}

function getMinMax(data, nodata) {
    let min, max;
    for (let j = 0; j < data.length; j += 1) {
        const val = data[j];
        if (val === nodata)
            continue;
        if (min === undefined && max === undefined) {
            min = max = val;
            continue;
        }
        if (val < min) {
            min = val;
        }
        else if (val > max) {
            max = val;
        }
    }
    return {
        min, max
    };
}
class TIFFImageryProvider {
    options;
    ready;
    tilingScheme;
    rectangle;
    tileSize;
    tileWidth;
    tileHeight;
    maximumLevel;
    minimumLevel;
    credit;
    _error;
    readyPromise;
    _destroyed = false;
    _source;
    _imageCount;
    _images = [];
    _imagesCache = {};
    bands;
    noData;
    hasAlphaChannel;
    _pool;
    _workerFarm;
    constructor(options) {
        this.options = options;
        this.ready = false;
        this.hasAlphaChannel = options.hasAlphaChannel ?? true;
        this.maximumLevel = options.maximumLevel ?? 18;
        this.minimumLevel = options.minimumLevel ?? 0;
        this.credit = new Credit(options.credit || "", false);
        this._error = new Event();
        this._workerFarm = this.options.webWorker !== false ? new WorkerFarm() : null;
        this.readyPromise = fromUrl(options.url, {
            allowFullFile: true
        }).then(async (res) => {
            this._pool = new Pool();
            this._source = res;
            const image = await res.getImage();
            this._imageCount = await res.getImageCount();
            this.tileSize = this.tileWidth = this.tileHeight = options.tileSize || image.getTileWidth() || 512;
            // 获取nodata值
            const noData = image.getGDALNoData();
            this.noData = options.renderOptions.nodata ?? noData;
            const bands = [];
            // 获取波段数
            const samples = image.getSamplesPerPixel();
            for (let i = 0; i < samples; i++) {
                // 获取该波段最大最小值信息
                const element = image.getGDALMetadata(i);
                if (element?.STATISTICS_MINIMUM && element?.STATISTICS_MAXIMUM) {
                    bands.push({
                        min: element.STATISTICS_MINIMUM,
                        max: element.STATISTICS_MAXIMUM,
                    });
                }
                else {
                    const previewImage = await res.getImage();
                    const data = (await previewImage.readRasters({
                        samples: [i],
                        pool: this._pool,
                    }))[0].filter((item) => !isNaN(item));
                    bands.push(getMinMax(data, noData));
                }
            }
            this.bands = bands;
            // 获取空间范围
            const bbox = image.getBoundingBox();
            const [west, south, east, north] = bbox;
            const prjCode = +(image.geoKeys.ProjectedCSTypeGeoKey ?? image.geoKeys.GeographicTypeGeoKey);
            const { projFunc } = options;
            const proj = projFunc?.(prjCode);
            if (typeof proj === 'function') {
                const leftBottom = proj([west, south]);
                const rightTop = proj([east, north]);
                this.rectangle = Rectangle.fromDegrees(leftBottom[0], leftBottom[1], rightTop[0], rightTop[1]);
            }
            else if (prjCode === 4326) {
                this.rectangle = Rectangle.fromDegrees(...bbox);
            }
            else if (prjCode === 3857 || prjCode === 900913) {
                this.rectangle = Rectangle.fromCartesianArray([new Cartesian3(west, south), new Cartesian3(east, north)]);
            }
            else {
                const error = new Error(`Unspported projection type: EPSG:${prjCode}, please add projFunc parameter to handle projection`);
                throw error;
            }
            // 处理跨180度经线的情况
            // https://github.com/CesiumGS/cesium/blob/da00d26473f663db180cacd8e662ca4309e09560/packages/engine/Source/Core/TileAvailability.js#L195
            if (this.rectangle.east < this.rectangle.west) {
                this.rectangle.east += Math$1.TWO_PI;
            }
            this.tilingScheme = new GeographicTilingScheme({
                rectangle: this.rectangle,
                numberOfLevelZeroTilesX: 1,
                numberOfLevelZeroTilesY: 1
            });
            this.maximumLevel = this.maximumLevel >= this._imageCount ? this._imageCount - 1 : this.maximumLevel;
            this._images = new Array(this._imageCount).fill(null);
            this.ready = true;
        });
    }
    /**
     * Gets an event that will be raised if an error is encountered during processing.
     * @memberof GeoJsonDataSource.prototype
     * @type {Event}
     */
    get errorEvent() {
        return this._error;
    }
    get isDestroyed() {
        return this._destroyed;
    }
    _getIndex(level) {
        const z = level > this._imageCount ? this._imageCount : level;
        const index = this._imageCount - z - 1;
        return index;
    }
    /**
     * 获取瓦片数据
     * @param x
     * @param y
     * @param z
     */
    async _loadTile(x, y, z) {
        const { tileSize } = this;
        const index = this._getIndex(z);
        let image = this._images[index];
        if (!image) {
            image = this._images[index] = await this._source.getImage(index);
        }
        const width = image.getWidth();
        const height = image.getHeight();
        const tileXNum = this.tilingScheme.getNumberOfXTilesAtLevel(z);
        const tileYNum = this.tilingScheme.getNumberOfYTilesAtLevel(z);
        const tilePixel = {
            xWidth: width / tileXNum,
            yWidth: height / tileYNum
        };
        const pixelBounds = [
            Math.round(x * tilePixel.xWidth),
            Math.round(y * tilePixel.yWidth),
            Math.round((x + 1) * tilePixel.xWidth),
            Math.round((y + 1) * tilePixel.yWidth),
        ];
        const promise = image.readRasters({
            window: pixelBounds,
            width: tileSize,
            height: tileSize,
            fillValue: this.noData,
            pool: this._pool,
        });
        return promise
            .then((res) => {
            return res;
        })
            .catch((error) => {
            this._error.raiseEvent(error);
            throw error;
        });
    }
    async requestImage(x, y, z) {
        if (!this.ready) {
            throw new DeveloperError("requestImage must not be called before the imagery provider is ready.");
        }
        if (z < this.minimumLevel || z > this.maximumLevel || z > this._imageCount)
            return undefined;
        if (this._imagesCache[`${x}_${y}_${z}`])
            return this._imagesCache[`${x}_${y}_${z}`];
        const width = this.tileSize;
        const height = this.tileSize;
        const { renderOptions } = this.options;
        try {
            const data = await this._loadTile(x, y, z);
            const opts = {
                width,
                height,
                renderOptions,
                bands: this.bands,
                noData: this.noData
            };
            let result;
            if (this._workerFarm?.worker) {
                result = await this._workerFarm.scheduleTask(data, opts);
            }
            else {
                result = undefined;
            }
            this._imagesCache[`${x}_${y}_${z}`] = result;
            return result;
        }
        catch (e) {
            this._error.raiseEvent(e);
            throw e;
        }
    }
    async pickFeatures(x, y, zoom, longitude, latitude) {
        if (!this.options.enablePickFeatures)
            return undefined;
        const z = zoom > this._imageCount ? this._imageCount : zoom;
        const index = this._getIndex(z);
        let image = this._images[index];
        if (!image) {
            image = this._images[index] = await this._source.getImage(index);
        }
        const { west, south, north, width: lonWidth } = this.rectangle;
        const width = image.getWidth();
        const height = image.getHeight();
        let lonGap = longitude - west;
        // 处理跨180°经线的情况
        if (longitude < west) {
            lonGap += Math$1.TWO_PI;
        }
        const posX = ~~(Math.abs(lonGap / lonWidth) * width);
        const posY = ~~(Math.abs((north - latitude) / (north - south)) * height);
        const res = await image.readRasters({
            window: [posX, posY, posX + 1, posY + 1],
            height: 1,
            width: 1,
            pool: this._pool,
        });
        const featureInfo = new ImageryLayerFeatureInfo();
        featureInfo.name = `lon:${(longitude / Math.PI * 180).toFixed(6)}, lat:${(latitude / Math.PI * 180).toFixed(6)}`;
        featureInfo.data = res[0];
        if (res) {
            featureInfo.configureDescriptionFromProperties(res[0]);
        }
        return [featureInfo];
    }
    destroy() {
        this._images = undefined;
        this._imagesCache = undefined;
        this._workerFarm?.destory();
        this._destroyed = true;
    }
}

export { TIFFImageryProvider, TIFFImageryProvider as default };
//# sourceMappingURL=index.js.map
